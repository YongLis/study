package com.aemoney.app.common.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

/**
 * 文件处理类 
 */
public class FileUtils {
    private static Logger logger = LoggerFactory.getLogger(FileUtils.class);
    
    /**
     * 文件上传(单个)
     * @return String 文件名
     * 
     */
    public static void uploadImage(String serverHostAddress, String oldFileName, String newFileName, InputStream inputStream) throws Exception{
        logger.info("image file upload start, newFileName="+newFileName);
        FileOutputStream outputStream = null;
        
        if(inputStream == null){
            throw new ServiceException(ErrorCode.SYSTEM_BUSY.getCode(), ErrorCode.SYSTEM_BUSY.getMsg());
        }
        
        if(StringUtils.isEmpty(serverHostAddress)){
            throw new ServiceException(ErrorCode.IMAGE_SERVER_HOST_ADDRESS_NOT_EXIST.getCode(), ErrorCode.IMAGE_SERVER_HOST_ADDRESS_NOT_EXIST.getMsg());
        }
        
        try {
         // 删除旧文件
            if(!StringUtils.isEmpty(oldFileName)){
                File file = new File(serverHostAddress+File.separator+oldFileName);
                if(file.exists()){
                    file.delete();
                }
            }
            
            // 新文件存放
            byte[] bt = new byte[2048];
            int length;
            // 判断服务器地址是否存在
            File tmpFile = new File(serverHostAddress);
            if(!tmpFile.exists()){
                throw new ServiceException(ErrorCode.IMAGE_SERVER_HOST_ADDRESS_NOT_EXIST.getCode(), ErrorCode.IMAGE_SERVER_HOST_ADDRESS_NOT_EXIST.getMsg());
            }
            
            outputStream = new FileOutputStream(tmpFile.getPath()+File.separator+newFileName);
            
            // 开始读取
            while((length = inputStream.read(bt)) != -1){
                outputStream.write(bt, 0, length);
            }
            
            outputStream.flush();
            
        } catch (Exception e) {
            logger.error("图片上传异常", e);
            throw new ServiceException(ErrorCode.IMAGE_UPLOAD_ERROR.getCode(), ErrorCode.IMAGE_UPLOAD_ERROR.getMsg());
        }
        finally{
            try {
                if(outputStream != null){
                    outputStream.close();
                }
                
                if(inputStream != null){
                    inputStream.close();
                }
            } catch (Exception e2) {
                logger.error("流关闭异常：", e2);
            }
            
        }
        
    }
    
    /**
     * 删除服务器文件 
     * @param serverHostAddress 服务器存放路径
     * @param fileName 文件名
     */
    public static void removeImage(String serverHostAddress, String fileName){
        if(!StringUtils.isEmpty(serverHostAddress) && !StringUtils.isEmpty(fileName)){
            logger.info("remove file start, fileName="+fileName);
            File df = new File(serverHostAddress+File.separator+fileName); //先获取服务器上file
            if (df.exists()) {
                df.delete();
                logger.info("remove file success");
            }
            
        }
        
    }
    
    /**
     * 文件读取
     * @return List<String> 
     */
    public static List<String> readFile(File file){
        List<String> list = null;
        logger.info("file read start");
        BufferedReader bufferedReader = null;
        try {
            if(file == null){
                logger.info("file not exist");
                return null;
            }
            list = new ArrayList<String>();
            bufferedReader = new BufferedReader(new FileReader(file));
            String tmpString = null;
            while((tmpString=bufferedReader.readLine()) != null){
                list.add(tmpString);
            }
            
        } catch (Exception e) {
            logger.error("file read error:", e);
        }
        finally{
            try {
                if(bufferedReader != null){
                    bufferedReader.close();
                }
            } catch (Exception e2) {
                logger.error("bufferedReader close error", e2);
            }
        }
        
        return list;
    }
    
    /**
     * 文件上传
     * @return String 文件名
     * 
     */
    public static void uploadFile(String serverHostAddress, String fileName, byte[] data) throws Exception{
        logger.info("file upload start, fileName="+fileName);
        FileOutputStream outputStream = null;
        
        
        if(StringUtils.isEmpty(serverHostAddress)){
            throw new ServiceException(ErrorCode.IMAGE_SERVER_HOST_ADDRESS_NOT_EXIST.getCode(), ErrorCode.IMAGE_SERVER_HOST_ADDRESS_NOT_EXIST.getMsg());
        }
        
        try {
         // 删除旧文件
            if(!StringUtils.isEmpty(fileName)){
                File file = new File(serverHostAddress+File.separator+fileName);
                if(file.exists()){
                    file.delete();
                }
            }
            
            // 新文件存放
            // 判断服务器地址是否存在
            File tmpFile = new File(serverHostAddress);
            if(!tmpFile.exists()){
                throw new ServiceException(ErrorCode.IMAGE_SERVER_HOST_ADDRESS_NOT_EXIST.getCode(), ErrorCode.IMAGE_SERVER_HOST_ADDRESS_NOT_EXIST.getMsg());
            }
            
            outputStream = new FileOutputStream(tmpFile.getPath()+File.separator+fileName);
            
            outputStream.write(data);
            outputStream.close();
            
        } catch (Exception e) {
            logger.error("文件上传异常", e);
            throw new ServiceException(ErrorCode.FILE_UPLOAD_ERROR.getCode(), ErrorCode.FILE_UPLOAD_ERROR.getMsg());
        }
        finally{
            try {
                if(outputStream != null){
                    outputStream.close();
                }
            } catch (Exception e2) {
                logger.error("流关闭异常：", e2);
            }
            
        }
        
    }
    
}
